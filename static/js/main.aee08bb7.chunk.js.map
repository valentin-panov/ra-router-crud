{"version":3,"sources":["utils/createReq.js","components/CreatePostHeader.js","components/Loading.js","components/Posts/Post/Post.js","components/Posts/Posts.js","components/PostCreator.js","components/PostContext.js","components/PostViewer.js","components/PostEditor.js","App.js","reportWebVitals.js","index.js"],"names":["createReq","a","query","method","content","id","baseURL","requestURL","fetch","headers","Headers","body","JSON","stringify","request","ok","Error","status","json","response","CreatePostHeader","basURL","className","to","Button","variant","color","Loading","Post","item","onPostClickHandler","history","useHistory","created","style","cursor","onClick","moment","fromNow","Posts","props","posts","map","PostCreator","onNewPostSubmitHandler","useState","post","setPost","noValidate","autoComplete","onSubmit","event","TextField","value","onInput","e","target","label","width","type","PostContext","React","createContext","PostViewer","match","onDeleteHandler","params","Consumer","find","i","PostEditor","onSaveHandler","defaultValue","App","setPosts","loading","setLoading","getPosts","then","data","push","preventDefault","useEffect","Provider","length","path","exact","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aee08bb7.chunk.js","sourcesContent":["export default async function createReq({ query, method, content, id }) {\n  const baseURL = 'https://vpanov-ra-router-crud-backend.herokuapp.com/';\n  // const baseURL = 'http://localhost:7777/';\n  const requestURL =\n    method === 'DELETE' ? baseURL + query + `${id}` : baseURL + query;\n\n  const request = await fetch(requestURL, {\n    method: method,\n    headers: new Headers({ 'content-type': 'application/json' }),\n    body: content ? JSON.stringify({ id, content }) : null,\n  });\n  if (!request.ok) {\n    throw new Error('Request error');\n  }\n  const response = request.status === 200 ? await request.json() : null;\n  return response;\n}\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nexport default function CreatePostHeader({ basURL }) {\n  return (\n    <div className='card'>\n      <div className='btn-holder'>\n        <Link to={basURL + '/posts/new'}>\n          <Button variant='contained' color='primary'>\n            Создать пост\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { ThreeDots } from 'svg-loaders-react';\n\nexport default function Loading() {\n  return (\n    <div>\n      <ThreeDots />\n    </div>\n  );\n}\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport moment from 'moment';\nimport 'moment/locale/ru';\n\nexport default function Post({ item, onPostClickHandler }) {\n  let history = useHistory();\n  const { id, content, created } = item;\n  return (\n    <div\n      className='card'\n      style={{ cursor: 'pointer' }}\n      onClick={() => onPostClickHandler({ id, history })}\n    >\n      <span className='card_time'>{moment(created).fromNow()}</span>\n      <span className='card_content'>{content}</span>\n    </div>\n  );\n}\n","import React from 'react';\nimport Post from './Post/Post';\n\nexport default function Posts(props) {\n  const { posts, onPostClickHandler } = props;\n  return (\n    <ul className=''>\n      {posts.map((item) => (\n        <Post\n          key={item.id}\n          item={item}\n          onPostClickHandler={onPostClickHandler}\n        />\n      ))}\n    </ul>\n  );\n}\n","import React, { useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Button, TextField } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\n\nexport default function PostCreator({ onNewPostSubmitHandler, basURL }) {\n  const [post, setPost] = useState('');\n  let history = useHistory();\n  return (\n    <div className='card'>\n      <div className='head-holder'>\n        <Link to={basURL + '/'}>\n          <CloseIcon style={{ cursor: 'pointer' }} />\n        </Link>\n      </div>\n      <form\n        className={'new-post-input'}\n        noValidate\n        autoComplete='off'\n        onSubmit={(event) => {\n          onNewPostSubmitHandler({ event, post, history });\n          setPost('');\n        }}\n      >\n        <TextField\n          value={post}\n          onInput={(e) => setPost(e.target.value)}\n          id='outlined-basic'\n          label='Новая публикация'\n          variant='outlined'\n          style={{ width: '100%' }}\n        />\n        <div className='btn-holder'>\n          <Button variant='contained' color='primary' type='submit'>\n            Опубликовать\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React from 'react';\nconst PostContext = React.createContext([]);\n\nexport default PostContext;\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport PostContext from './PostContext';\nimport moment from 'moment';\nimport 'moment/locale/ru';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Button } from '@material-ui/core';\n\nexport default function PostViewer({ match, onDeleteHandler, basURL }) {\n  let history = useHistory();\n  const id = match.params.id;\n  return (\n    <div className='card'>\n      <div className='head-holder'>\n        <Link to={basURL + '/'}>\n          <CloseIcon style={{ cursor: 'pointer' }} />\n        </Link>\n      </div>\n      <PostContext.Consumer>\n        {(posts) => {\n          const { created, content } = posts.find((i) => i.id === id);\n          return (\n            <>\n              <span className='card_time'>{moment(created).fromNow()}</span>\n              <span className='card_content'>{content}</span>\n            </>\n          );\n        }}\n      </PostContext.Consumer>\n      <div className='btn-holder'>\n        <Link to={basURL + `/posts/edit/${id}`}>\n          <Button variant='contained' color='primary'>\n            Изменить\n          </Button>\n        </Link>\n        &nbsp;\n        <Button\n          variant='contained'\n          color='secondary'\n          onClick={() => onDeleteHandler({ id, history })}\n        >\n          Удалить\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport PostContext from './PostContext';\nimport moment from 'moment';\nimport 'moment/locale/ru';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Button, TextField } from '@material-ui/core';\n\nexport default function PostEditor({ match, onSaveHandler, basURL }) {\n  const [post, setPost] = useState('');\n  let history = useHistory();\n  const id = match.params.id;\n  return (\n    <div className='card'>\n      <div className='head-holder'>\n        <span className='post-editor_header'>Редактировать публикацию</span>\n        <Link to={basURL + '/'}>\n          <CloseIcon style={{ cursor: 'pointer' }} />\n        </Link>\n      </div>\n\n      <PostContext.Consumer>\n        {(posts) => {\n          const { created, content } = posts.find((i) => i.id === id);\n          return (\n            <>\n              <span className='card_time'>{moment(created).fromNow()}</span>\n\n              <form\n                className={'new-post-input'}\n                noValidate\n                autoComplete='off'\n                onSubmit={(event) => {\n                  onSaveHandler({ event, id, post, history });\n                  setPost('');\n                }}\n              >\n                <TextField\n                  defaultValue={content}\n                  onInput={(e) => setPost(e.target.value)}\n                  id='outlined-basic'\n                  label=''\n                  variant='outlined'\n                  style={{ width: '100%' }}\n                />\n                <div className='btn-holder'>\n                  <Button variant='contained' color='primary' type='submit'>\n                    Сохранить\n                  </Button>\n                </div>\n              </form>\n            </>\n          );\n        }}\n      </PostContext.Consumer>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport createReq from './utils/createReq';\nimport CreatePostHeader from './components/CreatePostHeader';\nimport Loading from './components/Loading';\nimport Posts from './components/Posts/Posts';\nimport PostCreator from './components/PostCreator';\nimport PostViewer from './components/PostViewer';\nimport PostContext from './components/PostContext';\nimport PostEditor from './components/PostEditor';\n\nexport default function App() {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const basURL = '/ra-router-crud';\n\n  const getPosts = () => {\n    setLoading(true);\n    createReq({\n      query: 'posts',\n      method: 'GET',\n    }).then((data) => {\n      setPosts(data);\n      setLoading(false);\n    }); // знаю, как реализовать подгрузку только новых сообщений, но в условии этого нет, пока пропустим\n  };\n\n  const onPostClickHandler = ({ id, history }) => {\n    history.push(basURL + `/posts/${id}`);\n  };\n\n  const onNewPostSubmitHandler = ({ event, post, history }) => {\n    event.preventDefault();\n    if (post) {\n      createReq({\n        query: 'posts',\n        method: 'POST',\n        content: post,\n      });\n    }\n    history.push(basURL + '/');\n    getPosts();\n  };\n\n  const onDeleteHandler = ({ id, history }) => {\n    if (id) {\n      createReq({\n        query: 'posts/',\n        method: 'DELETE',\n        id,\n      });\n    }\n    history.push(basURL + '/');\n    getPosts();\n  };\n\n  const onSaveHandler = ({ event, id, post, history }) => {\n    event.preventDefault();\n    if (post) {\n      createReq({\n        query: 'posts',\n        method: 'POST',\n        content: post,\n        id: id,\n      });\n    }\n    history.push(basURL + '/');\n    getPosts();\n  };\n\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  return (\n    <Router>\n      <PostContext.Provider value={posts}>\n        <div className='wrapper>'>\n          <div className='container'>\n            <CreatePostHeader basURL={basURL} />\n            {loading && <Loading />}\n\n            <Switch>\n              {posts.length && (\n                <Route\n                  path={basURL + '/'}\n                  exact\n                  render={(props) => (\n                    <Posts\n                      {...props}\n                      posts={posts}\n                      onPostClickHandler={onPostClickHandler}\n                    />\n                  )}\n                />\n              )}\n              <Route\n                path={basURL + '/posts/new'}\n                exact\n                render={(props) => (\n                  <PostCreator\n                    {...props}\n                    onNewPostSubmitHandler={onNewPostSubmitHandler}\n                    basURL={basURL}\n                  />\n                )}\n              />\n\n              <Route\n                path={basURL + '/posts/:id'}\n                exact\n                render={(props) => (\n                  <PostViewer\n                    {...props}\n                    onDeleteHandler={onDeleteHandler}\n                    basURL={basURL}\n                  />\n                )}\n              />\n\n              <Route\n                path={basURL + '/posts/edit/:id'}\n                exact\n                render={(props) => (\n                  <PostEditor\n                    {...props}\n                    onSaveHandler={onSaveHandler}\n                    basURL={basURL}\n                  />\n                )}\n              />\n            </Switch>\n          </div>\n        </div>\n      </PostContext.Provider>\n    </Router>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport './App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}